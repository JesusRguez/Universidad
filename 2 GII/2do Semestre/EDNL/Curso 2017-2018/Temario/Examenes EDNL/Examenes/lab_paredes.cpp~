#include <iostream>

#include "alg_grafo_E-S.h"
#include "laberinto_paredes.hpp"


int main(){

    typedef GrafoP<unsigned>::vertice vertice;
    typedef GrafoP<unsigned>::tCamino tCamino;

    size_t N = 3; //laberinto de 3x3
    vector<vertice> P;
    tCamino ruta;/*
    pared p1{{0, 0}, {1, 0}}, p2{{0, 1}, {1, 1}},
                                  p3{1, 1, 1, 2}, p4{2, 0, 2, 1};*/
    vector<pared> paredes
    {
        {{0, 0}, {1, 0}},
            {{0, 1}, {1, 1}},
                {{1, 1}, {1, 2}},
                    {{2, 0}, {2, 1}}
    };

    /*
    p1.c1.fila=0; p1.c1.col=0; p1.c2.fila=1; p1.c2.col=0;
    p2.c1.fila=0; p2.c1.col=1; p2.c2.fila=1; p2.c2.col=1;
    p3.c1.fila=1; p3.c1.col=1; p3.c2.fila=1; p3.c2.col=2;
    p4.c1.fila=2; p4.c1.col=0; p4.c2.fila=2; p4.c2.col=1;
    */

    //paredes[0]=p1; paredes[1]=p2; paredes[2]=p3; paredes[3]=p4;
    /*
    casilla entrada, salida;
    entrada.fila=0; entrada.col=2;
    salida.fila=2; salida.col=0;
*/
    ruta = laberinto_paredes<unsigned>
        (N, paredes, casilla{0, 2}, casilla{2, 0});

    //ruta = camino(CasillaToNodo(entrada, 3), CasillaToNodo(salida, 3), P);

    tCamino::posicion p;

    cout << "----------------------" << endl;
    cout << "El camino a seguir es:" << endl;
    cout << "----------------------" << endl;
    cout << "NODO\tCASILLA" << endl;
    p = ruta.primera();
    while(p != ruta.fin()){
        cout << ruta.elemento(p) << "\t("
             << nodoToCasilla(ruta.elemento(p), N).fila << ", "
             << nodoToCasilla(ruta.elemento(p), N).col << ")" << endl;
        p = ruta.siguiente(p);
    }

}
