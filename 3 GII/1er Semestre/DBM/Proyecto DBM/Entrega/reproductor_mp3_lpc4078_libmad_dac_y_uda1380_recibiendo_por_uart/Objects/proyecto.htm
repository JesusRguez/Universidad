<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\proyecto.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\proyecto.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Fri Feb 23 13:41:15 2018
<BR><P>
<H3>Maximum Stack Usage =       7552 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mad_layer_III &rArr; III_decode &rArr; III_reorder &rArr; __aeabi_memcpy4
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">MemManage_Handler</a><BR>
 <LI><a href="#[b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">BusFault_Handler</a><BR>
 <LI><a href="#[c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">UsageFault_Handler</a><BR>
 <LI><a href="#[d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SVC_Handler</a><BR>
 <LI><a href="#[e]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">DebugMon_Handler</a><BR>
 <LI><a href="#[f]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">PendSV_Handler</a><BR>
 <LI><a href="#[10]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SysTick_Handler</a><BR>
 <LI><a href="#[26]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[27]">BOD_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[b]">BusFault_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[32]">CANActivity_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[29]">CAN_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2a]">DMA_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[e]">DebugMon_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[38]">EEPROM_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[22]">EINT0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[23]">EINT1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[24]">EINT2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[25]">EINT3_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2c]">ENET_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[36]">GPIO_IRQHandler</a> from generacion_audio_con_uda1380.o(i.GPIO_IRQHandler) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1b]">I2C0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1d]">I2C2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2b]">I2S_IRQHandler</a> from generacion_audio_con_uda1380.o(i.I2S_IRQHandler) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[35]">LCD_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2d]">MCI_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2e]">MCPWM_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[a]">MemManage_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[20]">PLL0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[30]">PLL1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[37]">PWM0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1a]">PWM1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2f]">QEI_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[21]">RTC_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1e]">SSP0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1f]">SSP1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[34]">SSP2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[39]">SystemInit</a> from system_lpc407x_8x_177x_8x.o(i.SystemInit) referenced from startup_lpc407x_8x_177x_8x.o(.text)
 <LI><a href="#[12]">TIMER0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[13]">TIMER1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[15]">TIMER3_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[16]">UART0_IRQHandler</a> from uart_lpc40xx_xon_xoff.o(i.UART0_IRQHandler) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[17]">UART1_IRQHandler</a> from uart_lpc40xx_xon_xoff.o(i.UART1_IRQHandler) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[18]">UART2_IRQHandler</a> from uart_lpc40xx_xon_xoff.o(i.UART2_IRQHandler) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[19]">UART3_IRQHandler</a> from uart_lpc40xx_xon_xoff.o(i.UART3_IRQHandler) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[33]">UART4_IRQHandler</a> from uart_lpc40xx_xon_xoff.o(i.UART4_IRQHandler) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[31]">USBActivity_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[28]">USB_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[c]">UsageFault_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[11]">WDT_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[47]">__main</a> from __main.o(!!!main) referenced from startup_lpc407x_8x_177x_8x.o(.text)
 <LI><a href="#[3c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3b]">_snputc</a> from _snputc.o(.text) referenced from noretval__2snprintf.o(.text)
 <LI><a href="#[40]">error</a> from reproductor_mp3.o(i.error) referenced from reproductor_mp3.o(i.reproducir_mp3)
 <LI><a href="#[43]">error_default</a> from decoder.o(i.error_default) referenced from decoder.o(i.run_sync)
 <LI><a href="#[42]">input</a> from reproductor_mp3.o(i.input) referenced from reproductor_mp3.o(i.reproducir_mp3)
 <LI><a href="#[44]">mad_layer_I</a> from layer12.o(i.mad_layer_I) referenced from frame.o(.constdata)
 <LI><a href="#[45]">mad_layer_II</a> from layer12.o(i.mad_layer_II) referenced from frame.o(.constdata)
 <LI><a href="#[46]">mad_layer_III</a> from layer3.o(i.mad_layer_III) referenced from frame.o(.constdata)
 <LI><a href="#[41]">output</a> from reproductor_mp3.o(i.output) referenced from reproductor_mp3.o(i.reproducir_mp3)
 <LI><a href="#[3d]">run_sync</a> from decoder.o(i.run_sync) referenced from decoder.o(i.mad_decoder_run)
 <LI><a href="#[3e]">synth_full</a> from synth.o(i.synth_full) referenced from synth.o(i.mad_synth_frame)
 <LI><a href="#[3f]">synth_half</a> from synth.o(i.synth_half) referenced from synth.o(i.mad_synth_frame)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[48]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[e7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[67]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[4c]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e8]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[55]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[4e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[50]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[e9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[5a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[101]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[49]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[104]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[52]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[54]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[105]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[56]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; reproducir_mp3 &rArr; uart_inicializar &rArr; iocon_configurar_pin &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[106]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[59]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[107]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[108]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[d0]"></a>retardo_software_fijar_escala</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retardo_software_asm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retardo_software_inicializar
</UL>

<P><STRONG><a name="[7f]"></a>retardo_software_us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retardo_software_asm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_inicializar
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retardo_software_inicializar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_esperar_mientras_ocupado
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_escribir_ir
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_escribir_dr
</UL>

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>MCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5d]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[5e]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_decoder_run
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[62]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_decoder_run
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_finish
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_finish
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[63]"></a>__2snprintf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, noretval__2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[109]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[4d]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[69]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_rational
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[cd]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[6b]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[10c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[6d]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[10d]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_reorder
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[5c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[60]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[111]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[71]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[51]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[73]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[64]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[65]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[3b]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2snprintf.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[6f]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[115]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[77]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[116]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[118]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[119]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[74]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[72]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[53]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[58]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[79]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[7a]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[7e]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[36]"></a>GPIO_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, generacion_audio_con_uda1380.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retardo_software_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2S_IRQHandler</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, generacion_audio_con_uda1380.o(i.I2S_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2S_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 696 bytes, Stack size 12 bytes, system_lpc407x_8x_177x_8x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[39]"></a>SystemInit</STRONG> (Thumb, 220 bytes, Stack size 4 bytes, system_lpc407x_8x_177x_8x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; fpu_init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpu_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_lpc40xx_xon_xoff.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UART0_IRQHandler &rArr; uart_manejador_interrupciones &rArr; uart_enviar_xoff &rArr; uart_transmitir &rArr; uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_manejador_interrupciones
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_lpc40xx_xon_xoff.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UART1_IRQHandler &rArr; uart_manejador_interrupciones &rArr; uart_enviar_xoff &rArr; uart_transmitir &rArr; uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_manejador_interrupciones
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_lpc40xx_xon_xoff.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UART2_IRQHandler &rArr; uart_manejador_interrupciones &rArr; uart_enviar_xoff &rArr; uart_transmitir &rArr; uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_manejador_interrupciones
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_lpc40xx_xon_xoff.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UART3_IRQHandler &rArr; uart_manejador_interrupciones &rArr; uart_enviar_xoff &rArr; uart_transmitir &rArr; uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_manejador_interrupciones
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_lpc40xx_xon_xoff.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UART4_IRQHandler &rArr; uart_manejador_interrupciones &rArr; uart_enviar_xoff &rArr; uart_transmitir &rArr; uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_manejador_interrupciones
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_inicializar
</UL>

<P><STRONG><a name="[94]"></a>fpu_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, system_lpc407x_8x_177x_8x.o(i.fpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fpu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c7]"></a>generacion_audio_ajustar_tasa_muestreo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, generacion_audio_con_uda1380.o(i.generacion_audio_ajustar_tasa_muestreo))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
</UL>

<P><STRONG><a name="[a3]"></a>generacion_audio_deshabilitar</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, generacion_audio_con_uda1380.o(i.generacion_audio_deshabilitar))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generacion_audio_inicializar
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generacion_audio_esperar_fin_fragmento
</UL>

<P><STRONG><a name="[9f]"></a>generacion_audio_encolar_bloque_muestras</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, generacion_audio_con_uda1380.o(i.generacion_audio_encolar_bloque_muestras))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = generacion_audio_encolar_bloque_muestras &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generacion_audio_habilitar
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
</UL>

<P><STRONG><a name="[a2]"></a>generacion_audio_esperar_fin_fragmento</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, generacion_audio_con_uda1380.o(i.generacion_audio_esperar_fin_fragmento))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = generacion_audio_esperar_fin_fragmento
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generacion_audio_deshabilitar
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[a1]"></a>generacion_audio_habilitar</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, generacion_audio_con_uda1380.o(i.generacion_audio_habilitar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = generacion_audio_habilitar
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generacion_audio_encolar_bloque_muestras
</UL>

<P><STRONG><a name="[a4]"></a>generacion_audio_inicializar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, generacion_audio_con_uda1380.o(i.generacion_audio_inicializar))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = generacion_audio_inicializar &rArr; uda1380_inicializar &rArr; i2c_inicializar &rArr; iocon_configurar_pin &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uda1380_inicializar
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generacion_audio_deshabilitar
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[a6]"></a>i2c_inicializar</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, i2c_lpc40xx.o(i.i2c_inicializar))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = i2c_inicializar &rArr; iocon_configurar_pin &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iocon_configurar_pin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uda1380_inicializar
</UL>

<P><STRONG><a name="[a8]"></a>i2c_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i2c_lpc40xx.o(i.i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_start &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uda1380_escribir_registro_configuracion
</UL>

<P><STRONG><a name="[a9]"></a>i2c_stop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, i2c_lpc40xx.o(i.i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = i2c_stop &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uda1380_escribir_registro_configuracion
</UL>

<P><STRONG><a name="[aa]"></a>i2c_transmitir_byte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, i2c_lpc40xx.o(i.i2c_transmitir_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = i2c_transmitir_byte &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uda1380_escribir_registro_configuracion
</UL>

<P><STRONG><a name="[a7]"></a>iocon_configurar_pin</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, iocon_lpc40xx.o(i.iocon_configurar_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = iocon_configurar_pin &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_inicializar
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_inicializar
</UL>

<P><STRONG><a name="[b2]"></a>lcd_borrar</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lcd_hd44780_lpc40xx.o(i.lcd_borrar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_borrar &rArr; lcd_escribir_ir &rArr; lcd_esperar_mientras_ocupado
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_escribir_ir
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[ad]"></a>lcd_cursor_xy_16x2</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lcd_hd44780_lpc40xx.o(i.lcd_cursor_xy_16x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_cursor_xy_16x2 &rArr; lcd_escribir_ir &rArr; lcd_esperar_mientras_ocupado
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_escribir_ir
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_imprimir_cadena_xy_16x2
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[b4]"></a>lcd_escribir_dr</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lcd_hd44780_lpc40xx.o(i.lcd_escribir_dr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_escribir_dr &rArr; lcd_esperar_mientras_ocupado
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retardo_software_us
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_esperar_mientras_ocupado
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_imprimir_cadena_xy_16x2
</UL>

<P><STRONG><a name="[b3]"></a>lcd_escribir_ir</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lcd_hd44780_lpc40xx.o(i.lcd_escribir_ir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_escribir_ir &rArr; lcd_esperar_mientras_ocupado
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retardo_software_us
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_esperar_mientras_ocupado
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_inicializar
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cursor_xy_16x2
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_borrar
</UL>

<P><STRONG><a name="[b5]"></a>lcd_esperar_mientras_ocupado</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lcd_hd44780_lpc40xx.o(i.lcd_esperar_mientras_ocupado))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_esperar_mientras_ocupado
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retardo_software_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_escribir_ir
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_escribir_dr
</UL>

<P><STRONG><a name="[ac]"></a>lcd_imprimir_cadena_xy_16x2</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcd_hd44780_lpc40xx.o(i.lcd_imprimir_cadena_xy_16x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_imprimir_cadena_xy_16x2 &rArr; lcd_cursor_xy_16x2 &rArr; lcd_escribir_ir &rArr; lcd_esperar_mientras_ocupado
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cursor_xy_16x2
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_escribir_dr
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[b6]"></a>lcd_inicializar</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, lcd_hd44780_lpc40xx.o(i.lcd_inicializar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_inicializar &rArr; lcd_escribir_ir &rArr; lcd_esperar_mientras_ocupado
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retardo_software_us
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retardo_software_inicializar
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_escribir_ir
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[9a]"></a>mad_bit_crc</STRONG> (Thumb, 236 bytes, Stack size 36 bytes, bit.o(i.mad_bit_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
</UL>

<P><STRONG><a name="[bb]"></a>mad_bit_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bit.o(i.mad_bit_init))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_buffer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
</UL>

<P><STRONG><a name="[90]"></a>mad_bit_length</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bit.o(i.mad_bit_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mad_bit_length
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors_lsf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
</UL>

<P><STRONG><a name="[9d]"></a>mad_bit_nextbyte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bit.o(i.mad_bit_nextbyte))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[8d]"></a>mad_bit_read</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, bit.o(i.mad_bit_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_sample
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II_samples
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_sideinfo
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors_lsf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
</UL>

<P><STRONG><a name="[8c]"></a>mad_bit_skip</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bit.o(i.mad_bit_skip))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
</UL>

<P><STRONG><a name="[cf]"></a>mad_decoder_finish</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, decoder.o(i.mad_decoder_finish))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[ce]"></a>mad_decoder_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, decoder.o(i.mad_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mad_decoder_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[b8]"></a>mad_decoder_run</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, decoder.o(i.mad_decoder_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mad_decoder_run &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[b9]"></a>mad_frame_decode</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, frame.o(i.mad_frame_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = mad_frame_decode &rArr; mad_header_decode &rArr; free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_sync
</UL>

<P><STRONG><a name="[bc]"></a>mad_frame_finish</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, frame.o(i.mad_frame_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mad_frame_finish &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_sync
</UL>

<P><STRONG><a name="[bd]"></a>mad_frame_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, frame.o(i.mad_frame_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mad_frame_init &rArr; mad_frame_mute
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_sync
</UL>

<P><STRONG><a name="[9b]"></a>mad_frame_mute</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, frame.o(i.mad_frame_mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mad_frame_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_default
</UL>

<P><STRONG><a name="[ba]"></a>mad_header_decode</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, frame.o(i.mad_header_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = mad_header_decode &rArr; free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_sync
</UL>

<P><STRONG><a name="[be]"></a>mad_header_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, frame.o(i.mad_header_init))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_init
</UL>

<P><STRONG><a name="[44]"></a>mad_layer_I</STRONG> (Thumb, 550 bytes, Stack size 176 bytes, layer12.o(i.mad_layer_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mad_layer_I &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_sample
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>mad_layer_II</STRONG> (Thumb, 1238 bytes, Stack size 400 bytes, layer12.o(i.mad_layer_II))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = mad_layer_II &rArr; II_samples &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II_samples
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>mad_layer_III</STRONG> (Thumb, 690 bytes, Stack size 328 bytes, layer3.o(i.mad_layer_III))
<BR><BR>[Stack]<UL><LI>Max Depth = 7552 + Unknown Stack Size
<LI>Call Chain = mad_layer_III &rArr; III_decode &rArr; III_reorder &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_sideinfo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>mad_stream_buffer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stream.o(i.mad_stream_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mad_stream_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[c0]"></a>mad_stream_finish</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stream.o(i.mad_stream_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mad_stream_finish &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_sync
</UL>

<P><STRONG><a name="[c1]"></a>mad_stream_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stream.o(i.mad_stream_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mad_stream_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_sync
</UL>

<P><STRONG><a name="[9e]"></a>mad_stream_sync</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stream.o(i.mad_stream_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mad_stream_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[d1]"></a>mad_synth_frame</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, synth.o(i.mad_synth_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mad_synth_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_sync
</UL>

<P><STRONG><a name="[c2]"></a>mad_synth_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, synth.o(i.mad_synth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mad_synth_init &rArr; mad_synth_mute
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_sync
</UL>

<P><STRONG><a name="[c3]"></a>mad_synth_mute</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, synth.o(i.mad_synth_mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mad_synth_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_init
</UL>

<P><STRONG><a name="[bf]"></a>mad_timer_set</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, timer.o(i.mad_timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = mad_timer_set &rArr; scale_rational &rArr; reduce_rational &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[57]"></a>main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = main &rArr; reproducir_mp3 &rArr; uart_inicializar &rArr; iocon_configurar_pin &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a0]"></a>parar_con_error</STRONG> (Thumb, 22 bytes, Stack size 20 bytes, error.o(i.parar_con_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmitir
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puntero_a_numero
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_manejador_interrupciones
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_retardo_ms
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_leer
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_inicializar
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_bytes_disponibles
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_inicializar
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_imprimir_cadena_xy_16x2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generacion_audio_encolar_bloque_muestras
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iocon_configurar_pin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transmitir_byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_inicializar
</UL>

<P><STRONG><a name="[c6]"></a>reproducir_mp3</STRONG> (Thumb, 574 bytes, Stack size 256 bytes, reproductor_mp3.o(i.reproducir_mp3))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = reproducir_mp3 &rArr; uart_inicializar &rArr; iocon_configurar_pin &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_leer
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_inicializar
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_bytes_disponibles
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_inicializar
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_decoder_run
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_decoder_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_decoder_finish
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_inicializar
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_imprimir_cadena_xy_16x2
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cursor_xy_16x2
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_borrar
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generacion_audio_inicializar
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>retardo_software_inicializar</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, retardo_software.o(i.retardo_software_inicializar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = retardo_software_inicializar
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retardo_software_us
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retardo_software_fijar_escala
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_inicializar
</UL>

<P><STRONG><a name="[ca]"></a>timer_inicializar</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, timer_lpc40xx.o(i.timer_inicializar))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = timer_inicializar &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uda1380_inicializar
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[d4]"></a>timer_retardo_ms</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, timer_lpc40xx.o(i.timer_retardo_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer_retardo_ms &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uda1380_inicializar
</UL>

<P><STRONG><a name="[af]"></a>uart_bytes_disponibles</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uart_lpc40xx_xon_xoff.o(i.uart_bytes_disponibles))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uart_bytes_disponibles &rArr; uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puntero_a_numero
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[d8]"></a>uart_enviar_xoff</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart_lpc40xx_xon_xoff.o(i.uart_enviar_xoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uart_enviar_xoff &rArr; uart_transmitir &rArr; uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmitir
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_manejador_interrupciones
</UL>

<P><STRONG><a name="[da]"></a>uart_enviar_xon</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart_lpc40xx_xon_xoff.o(i.uart_enviar_xon))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uart_enviar_xon &rArr; uart_transmitir &rArr; uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmitir
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_leer
</UL>

<P><STRONG><a name="[cb]"></a>uart_inicializar</STRONG> (Thumb, 1314 bytes, Stack size 120 bytes, uart_lpc40xx_xon_xoff.o(i.uart_inicializar))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = uart_inicializar &rArr; iocon_configurar_pin &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puntero_a_numero
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iocon_configurar_pin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[b0]"></a>uart_leer</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, uart_lpc40xx_xon_xoff.o(i.uart_leer))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = uart_leer &rArr; uart_enviar_xon &rArr; uart_transmitir &rArr; uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puntero_a_numero
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enviar_xon
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reproducir_mp3
</UL>

<P><STRONG><a name="[96]"></a>uart_manejador_interrupciones</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, uart_lpc40xx_xon_xoff.o(i.uart_manejador_interrupciones))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uart_manejador_interrupciones &rArr; uart_enviar_xoff &rArr; uart_transmitir &rArr; uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enviar_xoff
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>uart_puntero_a_numero</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart_lpc40xx_xon_xoff.o(i.uart_puntero_a_numero))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmitir
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_leer
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_inicializar
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_bytes_disponibles
</UL>

<P><STRONG><a name="[d9]"></a>uart_transmitir</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, uart_lpc40xx_xon_xoff.o(i.uart_transmitir))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uart_transmitir &rArr; uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_puntero_a_numero
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parar_con_error
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enviar_xon
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enviar_xoff
</UL>

<P><STRONG><a name="[de]"></a>uda1380_escribir_registro_configuracion</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uda1380_lpc4078fbd80.o(i.uda1380_escribir_registro_configuracion))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uda1380_escribir_registro_configuracion &rArr; i2c_transmitir_byte &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transmitir_byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uda1380_inicializar
</UL>

<P><STRONG><a name="[a5]"></a>uda1380_inicializar</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, uda1380_lpc4078fbd80.o(i.uda1380_inicializar))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uda1380_inicializar &rArr; i2c_inicializar &rArr; iocon_configurar_pin &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uda1380_escribir_registro_configuracion
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_retardo_ms
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_inicializar
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_inicializar
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generacion_audio_inicializar
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_inicializar
</UL>

<P><STRONG><a name="[df]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e1]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[e4]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_inicializar
</UL>

<P><STRONG><a name="[e2]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[e3]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[4f]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[11d]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[11e]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[e0]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[40]"></a>error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, reproductor_mp3.o(i.error))
<BR>[Address Reference Count : 1]<UL><LI> reproductor_mp3.o(i.reproducir_mp3)
</UL>
<P><STRONG><a name="[ab]"></a>gpio_leer_pin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, reproductor_mp3.o(i.gpio_leer_pin))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[42]"></a>input</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, reproductor_mp3.o(i.input))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = input &rArr; uart_leer &rArr; uart_enviar_xon &rArr; uart_transmitir &rArr; uart_puntero_a_numero &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_leer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_bytes_disponibles
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_buffer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_imprimir_cadena_xy_16x2
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cursor_xy_16x2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generacion_audio_esperar_fin_fragmento
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_leer_pin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reproductor_mp3.o(i.reproducir_mp3)
</UL>
<P><STRONG><a name="[41]"></a>output</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, reproductor_mp3.o(i.output))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = output &rArr; generacion_audio_encolar_bloque_muestras &rArr; parar_con_error
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generacion_audio_encolar_bloque_muestras
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generacion_audio_ajustar_tasa_muestreo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reproductor_mp3.o(i.reproducir_mp3)
</UL>
<P><STRONG><a name="[d6]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uart_lpc40xx_xon_xoff.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmitir
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_leer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_bytes_disponibles
</UL>

<P><STRONG><a name="[d7]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart_lpc40xx_xon_xoff.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmitir
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_leer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_bytes_disponibles
</UL>

<P><STRONG><a name="[43]"></a>error_default</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, decoder.o(i.error_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = error_default &rArr; mad_frame_mute
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_mute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> decoder.o(i.run_sync)
</UL>
<P><STRONG><a name="[3d]"></a>run_sync</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, decoder.o(i.run_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = run_sync &rArr; mad_frame_decode &rArr; mad_header_decode &rArr; free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_frame
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_finish
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_finish
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> decoder.o(i.mad_decoder_run)
</UL>
<P><STRONG><a name="[99]"></a>decode_header</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, frame.o(i.decode_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[9c]"></a>free_bitrate</STRONG> (Thumb, 258 bytes, Stack size 144 bytes, frame.o(i.free_bitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[86]"></a>III_aliasreduce</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, layer3.o(i.III_aliasreduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = III_aliasreduce
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[80]"></a>III_decode</STRONG> (Thumb, 1114 bytes, Stack size 4856 bytes, layer3.o(i.III_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 7224 + Unknown Stack Size
<LI>Call Chain = III_decode &rArr; III_reorder &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_stereo
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors_lsf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_reorder
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_overlap
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_s
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_l
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_freqinver
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_aliasreduce
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[8b]"></a>III_exponents</STRONG> (Thumb, 330 bytes, Stack size 36 bytes, layer3.o(i.III_exponents))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = III_exponents
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
</UL>

<P><STRONG><a name="[8a]"></a>III_freqinver</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, layer3.o(i.III_freqinver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = III_freqinver
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[83]"></a>III_huffdecode</STRONG> (Thumb, 1440 bytes, Stack size 336 bytes, layer3.o(i.III_huffdecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = III_huffdecode &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_requantize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_exponents
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[87]"></a>III_imdct_l</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, layer3.o(i.III_imdct_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = III_imdct_l &rArr; imdct36 &rArr; dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct36
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[89]"></a>III_imdct_s</STRONG> (Thumb, 636 bytes, Stack size 168 bytes, layer3.o(i.III_imdct_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = III_imdct_s
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[88]"></a>III_overlap</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, layer3.o(i.III_overlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = III_overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[85]"></a>III_reorder</STRONG> (Thumb, 234 bytes, Stack size 2360 bytes, layer3.o(i.III_reorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368<LI>Call Chain = III_reorder &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[8e]"></a>III_requantize</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, layer3.o(i.III_requantize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = III_requantize
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
</UL>

<P><STRONG><a name="[82]"></a>III_scalefactors</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, layer3.o(i.III_scalefactors))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = III_scalefactors &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[81]"></a>III_scalefactors_lsf</STRONG> (Thumb, 560 bytes, Stack size 88 bytes, layer3.o(i.III_scalefactors_lsf))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = III_scalefactors_lsf &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[91]"></a>III_sideinfo</STRONG> (Thumb, 502 bytes, Stack size 64 bytes, layer3.o(i.III_sideinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = III_sideinfo &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[84]"></a>III_stereo</STRONG> (Thumb, 1140 bytes, Stack size 144 bytes, layer3.o(i.III_stereo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = III_stereo
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[97]"></a>dctIV</STRONG> (Thumb, 256 bytes, Stack size 88 bytes, layer3.o(i.dctIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdctII
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct36
</UL>

<P><STRONG><a name="[d2]"></a>fastsdct</STRONG> (Thumb, 582 bytes, Stack size 132 bytes, layer3.o(i.fastsdct))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = fastsdct
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdctII
</UL>

<P><STRONG><a name="[8f]"></a>imdct36</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, layer3.o(i.imdct36))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = imdct36 &rArr; dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dctIV
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_l
</UL>

<P><STRONG><a name="[98]"></a>sdctII</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, layer3.o(i.sdctII))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastsdct
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dctIV
</UL>

<P><STRONG><a name="[92]"></a>II_samples</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, layer12.o(i.II_samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = II_samples &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
</UL>

<P><STRONG><a name="[93]"></a>I_sample</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, layer12.o(i.I_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I_sample &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
</UL>

<P><STRONG><a name="[d3]"></a>dct32</STRONG> (Thumb, 3284 bytes, Stack size 728 bytes, synth.o(i.dct32))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = dct32
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synth_half
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synth_full
</UL>

<P><STRONG><a name="[3e]"></a>synth_full</STRONG> (Thumb, 814 bytes, Stack size 88 bytes, synth.o(i.synth_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = synth_full &rArr; dct32
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dct32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synth.o(i.mad_synth_frame)
</UL>
<P><STRONG><a name="[3f]"></a>synth_half</STRONG> (Thumb, 828 bytes, Stack size 88 bytes, synth.o(i.synth_half))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = synth_half &rArr; dct32
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dct32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synth.o(i.mad_synth_frame)
</UL>
<P><STRONG><a name="[c9]"></a>gcd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(i.gcd))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_rational
</UL>

<P><STRONG><a name="[c8]"></a>reduce_rational</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timer.o(i.reduce_rational))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = reduce_rational &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
</UL>

<P><STRONG><a name="[c5]"></a>reduce_timer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(i.reduce_timer))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_set
</UL>

<P><STRONG><a name="[c4]"></a>scale_rational</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, timer.o(i.scale_rational))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = scale_rational &rArr; reduce_rational &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_rational
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_set
</UL>

<P><STRONG><a name="[3c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
